@page "/"
@using Radzen
@using CurrencyRatesDashboard.BlazoreUIss.Components.Pages
@using Radzen.Blazor
@using global::CurrencyRates.Application.Commands
@using global::CurrencyRates.Application.DTOs
@using global::CurrencyRates.Application.Interfaces
@using global::CurrencyRates.Application.Queries
@using global::CurrencyRates.Infrastructure.Services.Export
@inject ICurrencyRateService CurrencyRateService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ExportService ExportService
@inject MediatR.IMediator Mediator
@inject DialogService DialogService


<RadzenDataGrid @ref="_grid"
Data="@_currencyRates"
TItem="CurrencyRateDto"
AllowFiltering="true"
AllowSorting="true"
AllowPaging="true"
AllowColumnPicking="true"
PageSize="10"
Style="margin-top: 20px;">
    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Text="Обновить" Icon="refresh" ButtonStyle="ButtonStyle.Primary"
            Click="@OnRefreshClick" />
            <RadzenButton Text="Export XLS" Icon="grid_on"
            Click="@(args => Export("excel"))" />
        </RadzenStack>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="CurrencyRateDto" Property="CurrencyName" Title="Валюта" Width="200px" />
        <RadzenDataGridColumn TItem="CurrencyRateDto" Property="CurrencyCode" Title="Код" Width="100px" />
        <RadzenDataGridColumn TItem="CurrencyRateDto" Property="Rate" Title="Курс" Width="120px">
            <Template Context="data">
                @data.Rate.ToString("N4")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CurrencyRateDto" Property="Date" Title="Дата" Width="150px">
            <Template Context="data">
                @data.Date.ToString("dd.MM.yyyy")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CurrencyRateDto" Title="Действия" Width="150px">
            <Template Context="data">
                <RadzenButton Icon="visibility" ButtonStyle="ButtonStyle.Secondary"
                              Click="@(args => CurrencyRateTransposedDialog(data))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    private IReadOnlyList<CurrencyRateDto> _currencyRates = new List<CurrencyRateDto>();
    private RadzenDataGrid<CurrencyRateDto> _grid;
    private List<string> _themes = new() { "default", "humanistic", "material", "dark", "software", "standard" };
    private string _selectedTheme = "default";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    async Task OnRefreshClick()
    {
        Console.WriteLine("OnRefreshClick called");
        await RefreshRates();
    }

    private async Task LoadData()
    {
        _currencyRates = await CurrencyRateService.GetAllAsync();
        StateHasChanged();
    }
    async Task CurrencyRateTransposedDialog(CurrencyRateDto rate)
    {
        await DialogService.OpenAsync("Детали валюты", ds => @<RadzenCard Style="min-width:300px;">
        <RadzenStack Gap="1rem">
            <RadzenLabel Text="Валюта:" Style="font-weight:bold;" />
            <RadzenText Text="@rate.CurrencyName" />
            <RadzenLabel Text="Код:" Style="font-weight:bold;" />
            <RadzenText Text="@rate.CurrencyCode" />
            <RadzenLabel Text="Курс:" Style="font-weight:bold;" />
            <RadzenText Text="@rate.Rate.ToString("N4")" />
            <RadzenLabel Text="Дата:" Style="font-weight:bold;" />
            <RadzenText Text="@rate.Date.ToString("dd.MM.yyyy")" />
        </RadzenStack>
    </RadzenCard>, new DialogOptions() { Width = "400px", Resizable = true, Draggable = true });
    }

    private async Task RefreshRates()
    {
        try
        {
            var query = new RefreshCurrencyRatesCommand();
             await Mediator.Send(query);
            _currencyRates = await Mediator.Send(new GetCurrencyRatesQuery());
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Успех",
                    Detail = "Курсы валют успешно обновлены",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Ошибка",
                    Detail = $"Не удалось обновить курсы: {ex.Message}",
                    Duration = 4000
                });
        }
    }

    private async Task Export(string type)
    {
        try
        {
            await ExportService.Export<CurrencyRateDto>("CurrencyRates.xlsx", _currencyRates);
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Успех",
                    Detail = $"Файл успешно экспортирован в {type.ToUpper()}",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Ошибка",
                    Detail = $"Не удалось экспортировать файл: {ex.Message}",
                    Duration = 4000
                });
        }
    }
}