@page "/currency-rates"
@using Radzen
@using Radzen.Blazor
@using CurrencyRatesDashboard.BlazoreUI.Components.Pages.CurrencyRateDetailsDialog
@using CurrencyRatesDashboard.BlazoreUI.Components.Pages.ThemeDialog
@using global::CurrencyRates.Application.DTOs
@using global::CurrencyRates.Application.Interfaces
@using global::CurrencyRates.Infrastructure.Services.Export
@inject ICurrencyRateService CurrencyRateService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ExportService ExportService

<RadzenTheme />

<RadzenStack Orientation="Orientation.Vertical" Gap="20px">
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="20px" Style="margin-bottom: 20px;">
            <RadzenButton Text="Обновить" Click="@RefreshRates" Icon="refresh" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Text="Скачать Excel" Click="@DownloadRates" Icon="file_excel" ButtonStyle="ButtonStyle.Success" />
            <RadzenButton Text="Переключить тему" Click="@ToggleTheme" Icon="contrast" ButtonStyle="ButtonStyle.Secondary" />
        </RadzenStack>

        <RadzenDataGrid @ref="_grid" Data="@_currencyRates" TItem="CurrencyRateDto" AllowFiltering="true" AllowSorting="true"
                        AllowPaging="true" PageSize="10" Style="margin-top: 20px;">
            <Columns>
                <RadzenDataGridColumn TItem="CurrencyRateDto" Property="CurrencyName" Title="Валюта" Width="200px" />
                <RadzenDataGridColumn TItem="CurrencyRateDto" Property="CurrencyCode" Title="Код" Width="100px" />
                <RadzenDataGridColumn TItem="CurrencyRateDto" Property="Rate" Title="Курс" Width="120px">
                    <Template Context="data">
                        @data.Rate.ToString("N4")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CurrencyRateDto" Property="Date" Title="Дата" Width="150px">
                    <Template Context="data">
                        @data.Date.ToString("dd.MM.yyyy")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CurrencyRateDto" Title="Действия" Width="150px">
                    <Template Context="data">
                        <RadzenButton Icon="visibility" ButtonStyle="ButtonStyle.Info" Click="@(args => ShowDetails(data))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
</RadzenStack>

@code {
    private IReadOnlyList<CurrencyRateDto> _currencyRates = new List<CurrencyRateDto>();
    private RadzenDataGrid<CurrencyRateDto> _grid;
    private bool _isDarkTheme = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _currencyRates = await CurrencyRateService.GetAllAsync();
        StateHasChanged();
    }

    private async Task RefreshRates()
    {
        try
        {
            _currencyRates = await CurrencyRateService.RefreshRatesAsync();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Успех",
                Detail = "Курсы валют успешно обновлены",
                Duration = 4000
            });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ошибка",
                Detail = $"Не удалось обновить курсы: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private async Task DownloadRates()
    {
        try
        {
            await ExportService.Export("CurrencyRates.xlsx", _currencyRates);
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Успех",
                Detail = "Файл успешно сгенерирован",
                Duration = 4000
            });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ошибка",
                Detail = $"Не удалось сгенерировать файл: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private void ShowDetails(CurrencyRateDto rate)
    {
        DialogService.Open<CurrencyRateDetailsDialog>("Детали курса валюты",
            new Dictionary<string, object>() { { "Rate", rate } },
            new DialogOptions() { Width = "500px", Resizable = true, Draggable = true });
    }

    private void ToggleTheme()
    {
        _isDarkTheme = !_isDarkTheme;
        if (_isDarkTheme)
        {
            DialogService.Open<ThemeDialog>("Темная тема",
                new Dictionary<string, object>(),
                new DialogOptions() { Width = "300px" });
        }
        else
        {
            DialogService.Open<ThemeDialog>("Светлая тема",
                new Dictionary<string, object>(),
                new DialogOptions() { Width = "300px" });
        }
    }
}